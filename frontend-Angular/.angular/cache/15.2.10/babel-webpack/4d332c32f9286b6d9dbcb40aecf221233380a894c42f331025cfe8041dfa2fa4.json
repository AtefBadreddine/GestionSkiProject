{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { TypeAbonnement, TypeAbonnementValues } from 'src/app/models/abonnement';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/abonnement.service\";\nimport * as i3 from \"@angular/router\";\nconst _c0 = [\"class\", \"ts\"];\nexport class UpdateAbonnementComponent {\n  constructor(formBuilder, abonnementService, router, activatedRoute) {\n    this.formBuilder = formBuilder;\n    this.abonnementService = abonnementService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.typeAbonnementValues = TypeAbonnementValues;\n    this.abonnementForm = this.formBuilder.group({\n      dateDebut: [\"\", [Validators.required]],\n      dateFin: [\"\", [Validators.required]],\n      prixAbon: [\"\", [Validators.required]],\n      typeAbonnement: [TypeAbonnement.ANNUEL, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(res => this.id = res.get('id'));\n    this.abonnementService.getAbonnement(this.id).subscribe(abonnementData => {\n      this.abonnement = abonnementData;\n      // Patch the form with the Skieur data\n      this.abonnementForm.patchValue({\n        dateDebut: abonnementData.dateDebut,\n        dateFin: abonnementData.dateFin,\n        prixAbon: abonnementData.prixAbon,\n        typeAbonnement: abonnementData.typeAbonnement\n      });\n    }, error => {\n      console.error('Error fetching abonnement data:', error);\n    });\n  }\n  static #_ = this.ɵfac = function UpdateAbonnementComponent_Factory(t) {\n    return new (t || UpdateAbonnementComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AbonnementService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateAbonnementComponent,\n    selectors: [[\"app-update-abonnement\", 8, \"ts\"]],\n    attrs: _c0,\n    decls: 2,\n    vars: 0,\n    template: function UpdateAbonnementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"update-abonnement works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1cGRhdGUtYWJvbm5lbWVudC5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50X2FiL2NvbXBvbmVudHMvdXBkYXRlLWFib25uZW1lbnQvdXBkYXRlLWFib25uZW1lbnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGdMQUFnTCIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAAqBC,cAAc,EAAEC,oBAAoB,QAAQ,2BAA2B;;;;;;AAQ5F,OAAM,MAAOC,yBAAyB;EAKpCC,YAAoBC,WAAwB,EAAWC,iBAAqC,EACxEC,MAAe,EAASC,cAA8B;IADtD,gBAAW,GAAXH,WAAW;IAAwB,sBAAiB,GAAjBC,iBAAiB;IACpD,WAAM,GAANC,MAAM;IAAkB,mBAAc,GAAdC,cAAc;IAJ1D,yBAAoB,GAAGN,oBAAoB;IAK7B,IAAI,CAACO,cAAc,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC3CC,SAAS,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MACtCC,OAAO,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACY,QAAQ,CAAC,CAAC;MACpCE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,CAAC,CAAC;MACrCG,cAAc,EAAE,CAACd,cAAc,CAACe,MAAM,EAAE,CAAChB,UAAU,CAACY,QAAQ,CAAC;KAC1E,CAAC;EACJ;EAEAK,QAAQ;IAEN,IAAI,CAACT,cAAc,CAACU,QAAQ,CAACC,SAAS,CAACC,GAAG,IAAK,IAAI,CAACC,EAAE,GAAGD,GAAG,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC;IAEvE,IAAI,CAAChB,iBAAiB,CAACiB,aAAa,CAAC,IAAI,CAACF,EAAE,CAAC,CAACF,SAAS,CACpDK,cAA0B,IAAI;MAC7B,IAAI,CAACC,UAAU,GAAGD,cAAc;MAChC;MACA,IAAI,CAACf,cAAc,CAACiB,UAAU,CAAC;QAC7Bf,SAAS,EAAEa,cAAc,CAACb,SAAS;QACnCE,OAAO,EAAEW,cAAc,CAACX,OAAO;QAC/BC,QAAQ,EAAEU,cAAc,CAACV,QAAQ;QACjCC,cAAc,EAAES,cAAc,CAACT;OAChC,CAAC;IACJ,CAAC,EACAY,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,CACF;EAMH;EAAC;qBAvCUxB,yBAAyB;EAAA;EAAA;UAAzBA,yBAAyB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCXtCC,yBAAG;QAAAA,wCAAwB;QAAAA,iBAAI","names":["Validators","TypeAbonnement","TypeAbonnementValues","UpdateAbonnementComponent","constructor","formBuilder","abonnementService","router","activatedRoute","abonnementForm","group","dateDebut","required","dateFin","prixAbon","typeAbonnement","ANNUEL","ngOnInit","paramMap","subscribe","res","id","get","getAbonnement","abonnementData","abonnement","patchValue","error","console","selectors","attrs","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\projet_spring_angular\\GestionSkiProject\\frontend-Angular\\src\\app\\component_ab\\components\\update-abonnement\\update-abonnement.component.ts","C:\\projet_spring_angular\\GestionSkiProject\\frontend-Angular\\src\\app\\component_ab\\components\\update-abonnement\\update-abonnement.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Route, Router } from '@angular/router';\nimport { Abonnement, TypeAbonnement, TypeAbonnementValues } from 'src/app/models/abonnement';\nimport { AbonnementService } from 'src/app/services/abonnement.service';\n\n@Component({\n  selector: 'app-update-abonnement.ts',\n  templateUrl: './update-abonnement.component.html',\n  styleUrls: ['./update-abonnement.component.scss']\n})\nexport class UpdateAbonnementComponent {\n  abonnementForm: FormGroup;\n  typeAbonnementValues = TypeAbonnementValues;\n  abonnement : Abonnement;\n  id : string;\n  constructor(private formBuilder :FormBuilder , private abonnementService : AbonnementService,\n              private router : Router,private activatedRoute :ActivatedRoute) {\n                this.abonnementForm = this.formBuilder.group({\n                  dateDebut: [\"\", [Validators.required]],\n                  dateFin: [\"\", [Validators.required]],\n                  prixAbon: [\"\", [Validators.required]],\n                  typeAbonnement: [TypeAbonnement.ANNUEL, [Validators.required]]\n    })\n  }\n\n  ngOnInit() {\n\n    this.activatedRoute.paramMap.subscribe(res  => this.id = res.get('id'));\n\n    this.abonnementService.getAbonnement(this.id).subscribe(\n      (abonnementData: Abonnement) => {\n        this.abonnement = abonnementData;\n        // Patch the form with the Skieur data\n        this.abonnementForm.patchValue({\n          dateDebut: abonnementData.dateDebut,\n          dateFin: abonnementData.dateFin,\n          prixAbon: abonnementData.prixAbon,\n          typeAbonnement: abonnementData.typeAbonnement,\n        });\n      },\n      (error) => {\n        console.error('Error fetching abonnement data:', error);\n      }\n    );\n\n\n\n\n\n  }\n\n}\n","<p>update-abonnement works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}